@inject BlockCodePointRepository BlockCodePointRepository

@if (Block != null)
{
    <h2>@Block.Name <small>@Block.Range.FirstCodePoint.ToCodePointRepresentation() - @Block.Range.LastCodePoint.ToCodePointRepresentation()</small></h2>

    <MarkdownView class="block-description" Text="@Block.Description" />

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert"><pre>@ErrorMessage</pre></div>
    }
    @if (FetchedCodePointCount > 0)
    {
        <div class="table-responsive">
            <table class="table table-sm table-bordered code-point-table">
                <thead>
                    <tr>
                        <th class="bg-light"></th>
                        <th>0</th>
                        <th>1</th>
                        <th>2</th>
                        <th>3</th>
                        <th>4</th>
                        <th>5</th>
                        <th>6</th>
                        <th>7</th>
                        <th>8</th>
                        <th>9</th>
                        <th>A</th>
                        <th>B</th>
                        <th>C</th>
                        <th>D</th>
                        <th>E</th>
                        <th>F</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int firstRow = FirstRow;
                        int rowCount = FetchedCodePointCount >> 4;

                        // The current code point index will be tracked in parallel with rows and columns
                        for (int i = 0, codePointIndex = -(Block.Range.FirstCodePoint & 0xF); i < rowCount; i++)
                        {
                            var codePoints = CodePointView.Items;
                            <tr>
                                <td>@(((firstRow + i) << 4).ToHexadecimal())</td>
                                @for (int j = 0; j <= 0xF; j++, codePointIndex++)
                                {
                                    if (codePointIndex >= 0 && codePointIndex < codePoints.Length && codePoints[codePointIndex] is UnicodeBrowser.Client.Models.CodePoint codePoint)
                                    {
                                        <td class="display-text" title="@codePoint.Index.ToCodePointRepresentation() - @codePoint.GetDisplayName()">
                                            <a href="/codepoints/@codePoint.Index.ToHexadecimal()">@codePoint.DisplayText</a>
                                        </td>
                                    }
                                    else
                                    {
                                        <td class="display-text bg-warning" title="Not assigned"></td>
                                    }
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
    @if (IsFetching)
    {
        <div class="spinner"><i class="fas fa-2x fa-spinner fa-pulse"></i></div>
    }
    else if (LastRow > FirstRow && HasRemainingCodePoints)
    {
        <button type="button" class="btn btn-info" @onclick="FetchNextCodePoints">Show more code pointsâ€¦</button>
    }
}

@code {
    private UnicodeBrowser.Client.Models.BlockInformation _block;

    [Parameter]
    public UnicodeBrowser.Client.Models.BlockInformation Block
    {
        get => _block;
        set
        {
            if (!ReferenceEquals(value, _block) && (value == null || _block == null || !_block.Equals(value)))
            {
                FetchFirstCodePoints(value);
            }
        }
    }

    private string ErrorMessage { get; set; }

    private int FirstRow { get; set; }
    private int LastRow { get; set; }
    private int FetchedCodePointCount { get; set; }

    private PagedCodePointCollectionView CodePointView { get; set; }

    private bool IsFetching { get; set; }

    private bool HasRemainingCodePoints => Block != null && FetchedCodePointCount < CodePointView.Items.Length;

    private CancellationTokenSource _cancellationTokenSource;

    private void FetchFirstCodePoints(UnicodeBrowser.Client.Models.BlockInformation block)
    {
        if (_cancellationTokenSource != null)
        {
            _cancellationTokenSource.Cancel();
            _cancellationTokenSource.Dispose();
        }

        _cancellationTokenSource = new CancellationTokenSource();

        _block = block;

        if (block == null)
        {
            FirstRow = 0;
            LastRow = 0;
            FetchedCodePointCount = 0;
            CodePointView = null;
        }
        else
        {
            FirstRow = (block.Range.FirstCodePoint >> 4);
            LastRow = (block.Range.LastCodePoint >> 4);
            FetchedCodePointCount = 0;
            CodePointView = BlockCodePointRepository.GetBlockCodePointView(block);

            FetchNextCodePoints();
        }
    }

    private void FetchNextCodePoints() => FetchNextCodePointsInternal(_cancellationTokenSource.Token);

    private async void FetchNextCodePointsInternal(CancellationToken cancellationToken)
    {
        ErrorMessage = null;

        IsFetching = true;
        StateHasChanged();

        int threshold = Math.Min(FetchedCodePointCount + CodePointView.MaxPageSize, Block.Range.LastCodePoint - Block.Range.FirstCodePoint + 1);

        // NB: Cancellation of the request is expected to happen during the execution of this method.
        // State changes must only occur once the asynchronous fetch as completed (successfully or not) and we are sure that cancellation was not requested.

        try
        {
            await CodePointView.TryLoadNextItemsInternalAsync(threshold);
        }
        catch (Exception ex)
        {
            if (cancellationToken.IsCancellationRequested) return;

            ErrorMessage = ex.ToString();
        }

        if (cancellationToken.IsCancellationRequested) return;

        FetchedCodePointCount = CodePointView.LoadedItemCount;

        IsFetching = false;
        StateHasChanged();
    }
}
